PARSER_BEGIN(Parser)

import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import com.dummylang.values.*;
import com.dummylang.ast.*;

public class Parser {
    public Parser() {}
}

PARSER_END(Parser)

SKIP : {
	" "           // Regular space
|	"\t"          // Horizontal tab
|	"\n"          // Newline
|	"\r"          // Carriage return
|	"\f"          // Form feed
|	"\u000B"      // Vertical tab
|	"\u00A0"      // Non-breaking space (often used in text editors)
|	"\u1680"      // Ogham space mark
|	"\u180E"      // Mongolian vowel separator
|	"\u2000"      // En quad
|	"\u2001"      // Em quad
|	"\u2002"      // En space
|	"\u2003"      // Em space
|	"\u2004"      // Three-per-em space
|	"\u2005"      // Four-per-em space
|	"\u2006"      // Six-per-em space
|	"\u2007"      // Figure space
|	"\u2008"      // Punctuation space
|	"\u2009"      // Thin space
|	"\u200A"      // Hair space
|	"\u2028"      // Line separator
|	"\u2029"      // Paragraph separator
|	"\u202F"      // Narrow no-break space
|	"\u205F"      // Medium mathematical space
|	"\u3000"      // Ideographic space (common in CJK text)
}

TOKEN : {
	<FUN: "fn">
|	<RETURN: "return">
|	<COMMA: ",">
|	<WHILE: "while">
|	<IF: "if">
|	<BOOLEAN: ( "true" | "false")>
|   <NIL: "nil">
|	<VAR: "var">
|	<CONST: "const">
|	<NEW: "new">
|	<ASSIGN: ":=">
|	<REF: "!">
|	<POINTER: "#">
|	<PRINTLN: "println">
|	<ID: ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z", "0"-"9"] )*>
|	<INT: (["0"-"9"])+>
|   <FLOAT: (["0"-"9"])+ "." (["0"-"9"])+>
|	<LOGICALEQUAL: "==">
|	<LOWER: "<">
|	<LOWEROREQUAL: "<=">
|	<OR: "||">
|	<AND: "&&">
|	<NOT: "~">
|	<GREATER: ">">
|	<GREATEROREQUAL: ">=">
|	<PLUS: "+">
|	<INC: "++">
|	<MINUS: "-">
|	<DEC: "--">
|	<TIMES: "*">
|	<DIV: "/">
|	<LPAR: "(">
|	<RPAR: ")">
|	<LBRA: "{">
|	<RBRA: "}">
|	<EQUAL: "=">
|	<SEMCOL: ";">
|	<FINAL: ";;">
|	<STRING: "\"" (~["\""])+ "\"" >
}

ASTNode Start():
{ ASTNode t; }
{
   t = S() <FINAL>
   { return t; }
}

ASTNode S():
{ ASTNode t1, t2; }
{
  t1 = SS() ( <SEMCOL> t2 = SS() {
         t1 = new ASTSemCol(t1, t2);
     })*
     { return t1; }
}

ASTNode SS():
{ ASTNode t1; }
{
 (
    <LBRA> t1 = S() <RBRA> { t1 = new ASTEnv(t1); }
  |
    t1 = SE()
  )
  { return t1; }
}

ASTNode SE():
{ Token op, n, p = null,ass = null;
  ASTNode t1, t2; }
{
    (
       <RETURN> t1 = SS() {
                t1 = new ASTReturn(t1);
            }
      |
       LOOKAHEAD(2) n = <ID> <ASSIGN> t2=SS() {
            t1 = new ASTAssign(new ASTId(n.image), t2);
       }
      |
       (op = <VAR> | op = <CONST>) (p = <POINTER>)? n = <ID>
       (
           <ASSIGN> t2=SS() {
               boolean isPointer = (p != null);
               t1 = new ASTCreate(op.image, isPointer, new ASTId(n.image), t2);
           }
           |
           {
               boolean isPointer = (p != null);
               t1 = new ASTCreate(op.image, isPointer, new ASTId(n.image), null);
           }
       )
      |
      t1 = BA()
    )
    { return t1; }
}

ASTNode BA():
{
    Token op;
    ASTNode t1, t2;
}
{
t1=BM()  (LOOKAHEAD(2) op=<OR> t2=BM() {
    			t1 = new ASTOr(t1,t2);
    			})*
  { return t1;}
}

ASTNode BM():
{
    Token op;
    ASTNode t1, t2;
}
{
t1=Relop() ( LOOKAHEAD(2) op=<AND> t2=Relop() {
    			t1 = new ASTAnd(t1,t2);
    			})*
  { return t1;}
}

ASTNode Relop():
{
    Token op;
    ASTNode t1, t2;
}
{
t1=Exp() ( LOOKAHEAD(2) (op=<GREATER> | op=<LOWER> | op=<LOWEROREQUAL> | op=<GREATEROREQUAL> | op=<LOGICALEQUAL>) t2=Exp() {
    			switch (op.kind){
                    case GREATER:
                        t1 = new ASTGreater(t1,t2);
                    break;
                    case LOWER:
                        t1 = new ASTLower(t1,t2);
                    break;
                    case LOWEROREQUAL:
                        t1 = new ASTLowerOrEqual(t1,t2);
                    break;
                    case GREATEROREQUAL:
                        t1 = new ASTGreaterOrEqual(t1,t2);
                    break;
                     case LOGICALEQUAL:
                        t1 = new ASTLogicalEqual(t1,t2);
                    break;
                    default:
    			}
    			})?
  { return t1;}
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
   t1=Term() (( op=<PLUS> | op=<MINUS> ) t2=Term() {
           if (op.kind == PLUS)
               t1 = new ASTPlus(t1, t2);
           else
               t1 = new ASTSub(t1, t2);
       }
   )*
   { return t1; }
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
   t1=Fact() (
        ( op=<TIMES> | op=<DIV> ) t2=Term() {
    			if (op.kind == TIMES)
    				t1 = new ASTTimes(t1,t2);
                else
                	t1 = new ASTDiv(t1,t2); })*
  { return t1;}
}

ASTNode Fact() :
{
    Token n, n2;
    ASTNode t, t1, t2;
    Map<String, ASTNode> l = new HashMap<>();
    List<String> params = new ArrayList<>();
    List<ASTNode> values = new ArrayList<>();
}
{
    (
      <REF> t1=Fact() { t = new ASTDeref(t1); }
    | n=<INT> { t = new ASTNum("INT", n.image); }
    | n=<FLOAT> { t = new ASTNum("FLOAT", n.image); }
    | n=<NIL> {t = new ASTNil();}
    | <LPAR> t=S() <RPAR>
    | n=<BOOLEAN> { t = new ASTBoolean(Boolean.parseBoolean(n.image)); }
    | <PRINTLN> <LPAR> t1 = S() <RPAR> { t = new ASTPrintln(t1); }
    | <FUN> { params.clear(); } n=<ID> <LPAR>
      (n2=<ID> { params.add(n2.image); })?
      (<COMMA> n2=<ID> { params.add(n2.image); })*
      <RPAR> t1 = S()
      { t = new ASTFunctionEnv(n.image, new VFun(t1, params, n.image)); }
    | LOOKAHEAD(2) n=<ID> <LPAR>
      (
          t1 = BA()
          {
              values.clear();
              values.add(t1);
          }
          (
              <COMMA> t1 = BA() { values.add(t1); }
          )*
      )?
      <RPAR>
      {
          t = new ASTFunction(
              values != null ? values : new ArrayList<>(),
              n.image
          );
      }
    | n=<ID> { t = new ASTId(n.image); }
    | n=<STRING> { t = new ASTString(n.image.replaceAll("\\p{P}","")); }
    | <IF> t=SE() <LBRA> t1 = S() <RBRA> <LBRA> t2 = S() <RBRA>
      { t = new ASTIf(t, t1, t2); }
    | <WHILE> t1=SE() <LBRA> t2=S() <RBRA>
      { t = new ASTWhile(t1, t2); }
    | <MINUS> t1=Fact() { t = new ASTNeg(t1); }
    | <NOT> t1=Fact() { t = new ASTNot(t1); }
    )
    { return t; }
}